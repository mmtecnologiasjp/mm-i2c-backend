// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid       String     @id @default(uuid())
  first_name String
  last_name  String?
  username   String
  email      String     @unique
  status     StatusEnum
  password   String
  avatar_url String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  groups                Group[]
  group_member          GroupMembers[]
  tasks                 Tasks[]
  contents              Contents[]
  assignee_to           TasksAssignees[]
  messages              Messages[]
  images_sent           Images[]
  private_conversations PrivateConversationMembers[]

  @@map("users")
}

model Group {
  uuid      String  @id @default(uuid())
  name      String
  description String?
  image_url String?

  creator       User   @relation(fields: [creator_uuid], references: [uuid])
  creator_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  members GroupMembers[]
  tasks        Tasks[]
  contents      Contents[]
  messages     Messages[]
  images       Images[]

  @@map("groups")
}

model GroupMembers {
  uuid      String @id @default(uuid())
  user      User   @relation(fields: [user_uuid], references: [uuid])
  user_uuid String @default(uuid())

  group    Group  @relation(fields: [group_id], references: [uuid])
  group_id String @default(uuid())

  @@map("group_members")
}

model PrivateConversations {
  uuid String @id @default(uuid())

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  members  PrivateConversationMembers[]
  tasks    Tasks[]
  content  Contents[]
  messages Messages[]
  images   Images[]

  @@map("private_conversations")
}

model PrivateConversationMembers {
  uuid String @id @default(uuid())

  private_conversation PrivateConversations @relation(fields: [conversation_uuid], references: [uuid])
  conversation_uuid    String

  user      User   @relation(fields: [user_uuid], references: [uuid])
  user_uuid String

  @@map("private_conversation_members")
}

model Messages {
  uuid    String @id @default(uuid())
  content String

  private_conversation      PrivateConversations? @relation(fields: [private_conversation_uuid], references: [uuid])
  private_conversation_uuid String?

  group      Group? @relation(fields: [group_uuid], references: [uuid])
  group_uuid String?

  owner      User?  @relation(fields: [owner_uuid], references: [uuid])
  owner_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("messages")
}

model Images {
  uuid String @id @default(uuid())
  url  String

  private_conversation      PrivateConversations? @relation(fields: [private_conversation_uuid], references: [uuid])
  private_conversation_uuid String

  group      Group? @relation(fields: [group_uuid], references: [uuid])
  group_uuid String

  owner      User?  @relation(fields: [owner_uuid], references: [uuid])
  owner_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("images")
}

model Tasks {
  uuid        String       @id @default(uuid())
  title       String
  description String
  label       String
  state       String
  priority    PriorityEnum
  sprint      String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  deleted_at  DateTime?

  private_conversation      PrivateConversations? @relation(fields: [private_conversation_uuid], references: [uuid])
  private_conversation_uuid String?

  group      Group? @relation(fields: [group_uuid], references: [uuid])
  group_uuid String?

  owner      User?  @relation(fields: [owner_uuid], references: [uuid])
  owner_uuid String

  task_assignees TasksAssignees[]

  @@map("tasks")
}

model TasksAssignees {
  uuid String @id @default(uuid())

  task      Tasks  @relation(fields: [task_uuid], references: [uuid])
  task_uuid String

  user      User   @relation(fields: [user_uuid], references: [uuid])
  user_uuid String

  @@map("tasks_assignees")
}

model Contents {
  uuid    String @id @default(uuid())
  content String
  title String?
  type ContentTypeEnum

  private_conversation      PrivateConversations? @relation(fields: [private_conversation_uuid], references: [uuid])
  private_conversation_uuid String?


  group      Group? @relation(fields: [group_uuid], references: [uuid])
  group_uuid String?

  owner      User?  @relation(fields: [owner_uuid], references: [uuid])
  owner_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("contents")
}

enum StatusEnum {
  Active
  Inactive
  Banned
  Quarantine
}

enum PriorityEnum {
  Urgent
  High
  Medium
  Low
  Lowest
}

enum ContentTypeEnum {
  note
  topic
}
