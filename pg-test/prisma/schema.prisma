// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid       String     @id @default(uuid())
  first_name String
  last_name  String?
  username   String
  email      String     @unique
  status     StatusEnum
  password   String
  avatar_url String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  groups                     Group[]
  group_member               GroupMembers[]
  assignee_to                TasksAssignees[]
  messages_metadata          MessagesMetadata[]
  tasks_sent                 Tasks[]
  tasks_received             Tasks[]                @relation("TasksReceived")
  contents_sent              Contents[]
  contents_received          Contents[]             @relation("ContentsReceived")
  private_conversations_from PrivateConversations[]
  private_conversations_to   PrivateConversations[] @relation("PrivateConversationsTo")
  send_messages              Messages[]

  @@map("users")
}

model Group {
  uuid        String  @id @default(uuid())
  name        String
  description String?
  image_url   String?

  creator      User   @relation(fields: [creator_uuid], references: [uuid])
  creator_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  members  GroupMembers[]
  tasks    Tasks[]
  contents Contents[]
  messages Messages[]

  @@map("groups")
}

model GroupMembers {
  uuid      String @id @default(uuid())
  user      User   @relation(fields: [user_uuid], references: [uuid])
  user_uuid String @default(uuid())

  group    Group  @relation(fields: [group_id], references: [uuid])
  group_id String @default(uuid())

  @@map("group_members")
}

model PrivateConversations {
  uuid String @id @default(uuid())

  from      User   @relation(fields: [from_uuid], references: [uuid])
  from_uuid String

  to      User   @relation("PrivateConversationsTo", fields: [to_uuid], references: [uuid])
  to_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  messages Messages[]

  @@map("private_conversations")
}

model Messages {
  uuid    String @id @default(uuid())
  content String

  group      Group?  @relation(fields: [group_uuid], references: [uuid])
  group_uuid String?

  private_conversation      PrivateConversations? @relation(fields: [private_conversation_uuid], references: [uuid])
  private_conversation_uuid String?

  sender      User   @relation(fields: [sender_uuid], references: [uuid])
  sender_uuid String

  type MessageTypeEnum

  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?
  messages_metadata MessagesMetadata[]

  @@map("messages")
}

model MessagesMetadata {
  uuid  String @id @default(uuid())
  key   String
  value String

  message      Messages @relation(fields: [message_uuid], references: [uuid])
  message_uuid String

  user      User   @relation(fields: [user_uuid], references: [uuid])
  user_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("messages_metadata")
}

model StorageFiles {
  uuid       String @id @default(uuid())
  filename   String
  path       String
  url        String
  size_bytes Int

  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted_at           DateTime?
  StorageFilesMetadata StorageFilesMetadata[]

  @@map("storage_files")
}

model StorageFilesMetadata {
  uuid  String @id @default(uuid())
  key   String
  value String

  file      StorageFiles @relation(fields: [file_uuid], references: [uuid])
  file_uuid String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("storage_files_metadata")
}

model Tasks {
  uuid        String       @id @default(uuid())
  title       String
  description String
  label       String
  state       String
  priority    PriorityEnum
  sprint      String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  deleted_at  DateTime?

  group      Group?  @relation(fields: [group_uuid], references: [uuid])
  group_uuid String?

  sender      User   @relation(fields: [sender_uuid], references: [uuid])
  sender_uuid String

  receiver      User?   @relation("TasksReceived", fields: [receiver_uuid], references: [uuid])
  receiver_uuid String?

  task_assignees TasksAssignees[]

  @@map("tasks")
}

model TasksAssignees {
  uuid String @id @default(uuid())

  task      Tasks  @relation(fields: [task_uuid], references: [uuid])
  task_uuid String

  user      User   @relation(fields: [user_uuid], references: [uuid])
  user_uuid String

  @@map("tasks_assignees")
}

model Contents {
  uuid    String          @id @default(uuid())
  content String
  title   String?
  type    ContentTypeEnum

  group      Group?  @relation(fields: [group_uuid], references: [uuid])
  group_uuid String?

  sender      User   @relation(fields: [sender_uuid], references: [uuid])
  sender_uuid String

  receiver      User?   @relation("ContentsReceived", fields: [receiver_uuid], references: [uuid])
  receiver_uuid String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("contents")
}

enum StatusEnum {
  Active
  Inactive
  Banned
  Quarantine
}

enum PriorityEnum {
  Urgent
  High
  Medium
  Low
  Lowest
}

enum ContentTypeEnum {
  note
  topic
}

enum MessageTypeEnum {
  text
  image
  video
  audio
  file
  topic
  note
  task
}
