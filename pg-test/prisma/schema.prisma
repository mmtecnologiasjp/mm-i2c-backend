// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid       String     @id @default(uuid())
  first_name String
  last_name  String?
  username   String
  email      String     @unique
  status     StatusEnum
  password   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  groups               Group[]
  group_member         Group_Member[]
  // send_messages     Messages[]     @relation("send_messages")
  // received_messages Messages[]     @relation("received_messages")

  @@map("users")
}

model Group {
  uuid       String @id @default(uuid())
  name       String
  user       User   @relation(fields: [creator_id], references: [uuid])
  creator_id String

  group_member          Group_Member[]

  @@map("groups")
}

model Group_Member {
  uuid      String @id @default(uuid())
  user      User   @relation(fields: [user_uuid], references: [uuid])
  user_uuid String @default(uuid())

  group    Group  @relation(fields: [group_id], references: [uuid])
  group_id String @default(uuid())

  @@map("group_members")
}

// model Messages {
//   uuid      String   @id @default(uuid())
//   content   String
//   timestamp DateTime

//   sender        User    @relation("send_messages", fields: [sender_uuid], references: [uuid])
//   sender_uuid   String
//   receiver      User?   @relation("received_messages", fields: [receiver_uuid], references: [uuid])
//   receiver_uuid String?

//   group    Group?  @relation(fields: [group_id], references: [uuid])
//   group_id String?

//   @@map("messages")
// }

model PrivateConversations {
  uuid String @id @default(uuid())

  members PrivateConversationMembers[]
}

model PrivateConversationMembers {
  uuid String @id @default(uuid())

  private_conversation PrivateConversations @relation(fields: [conversation_uuid], references: [uuid])
  conversation_uuid String
}

model Tasks {
  uuid                      String       @id @default(uuid())
  title                     String
  description               String
  label                     String
  state                     String
  priority                  PriorityEnum
  sprint                    String
  private_conservation_uuid String
}

enum StatusEnum {
  Active
  Inactive
  Banned
  Quarantine
}

enum PriorityEnum {
  Urgent
  High
  Medium
  Low
  Lowest
}
